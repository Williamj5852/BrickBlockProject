/* BrickBlock Project
 * Program gives an accurate estimate of needed bricks for a build  
 * Date Created: 10/20/21   //      Last Modified: 11/3/21 
 * Jamison Williams, Kevin Patterson, Logan Sines
 */
package brickblockcalc;
import javax.swing.JOptionPane;
public class BrickBlockCalc {
    public static void main(String[] args) {
        System.out.println("Powering On...\n\n\n\n");
        //JUMPS TO METHOD TO GET WHATEVER COMES FIRST
        getBrick();
    }
    public static void getBrick () {
        String input;
        String[] option = null;
        input = JOptionPane.showInputDialog(/*EDIT TEXT TO SHOW ALL BRICK DIMENSIONS*/"What bricks do you plan on using?");
        try {
            int menuOption = Integer.parseInt(input);
            //switch statement applies the variable for BRICK to chosen brick dimensions
            if (menuOption > 0 && menuOption < 6){
                    option = new String[menuOption];
                //<editor-fold defaultstate="collapsed" desc="BrickOptions">
                switch (menuOption){
                    case 1:
                        //EXAMPLE ONLY
                        double bl = 2, bw = 2, bh = 2;
                        break;
                    case 5:
                        break;
                }
                //</editor-fold>
            }
            else {
                JOptionPane.showMessageDialog(null, "Your input was invalid\nPlease type a number 1-#");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Your input was invalid\nPlease type a number 1-#");
        }
        wallMeasurements();
    }   
    
public static void wallMeasurements() 
    {
        double wallHeight = Double.parseDouble(JOptionPane.showInputDialog(null, "Enter the height of the desired wall (in): "));
        double wallWidth = Double.parseDouble(JOptionPane.showInputDialog(null, "Enter the width of the desired wall (in): "));
        
        String input;
        double wallLength = 0;
        
        input = JOptionPane.showInputDialog("From corner to corner, enter the length of the desired wall: ");
        wallLength = wallLength + Double.parseDouble(input);
        boolean stop = false;
        while(!stop)
        {
            Object[] options1 = { "Yes", "No" };
            JPanel panel = new JPanel();
            panel.add(new JLabel("Would you like to enter the length of another wall (corner to corner)?"));
            int result = JOptionPane.showOptionDialog(null, panel, "Wall Length", 
            JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options1, null);
            
            if (result == JOptionPane.YES_OPTION)
            {
                input = JOptionPane.showInputDialog("From corner to corner, enter "
                + "the length of the desired wall: " + "\nCurrent total length: " + wallLength +" ft.");
                wallLength = wallLength + Double.parseDouble(input);
            }
            
            if (result == JOptionPane.NO_OPTION)
            {
                stop = true;
            }
            
        }
        
        JOptionPane.showMessageDialog(null,"Height: " + wallHeight + " inches\nWidth: " 
        + wallWidth + " inches\nLengh: " + wallLength + " feet");
    }
    
   public static void getVoids() {
        Object[] options1 = { "Yes", "No" };
        JPanel panel = new JPanel();
        panel.add(new JLabel("Are there any door or window areas needed?"));
        int result = JOptionPane.showOptionDialog(null, panel, "Void Areas", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options1, null);

        if (result == JOptionPane.YES_OPTION){
            calcVoids();
        }
        if (result == JOptionPane.NO_OPTION){
            JOptionPane.showMessageDialog(null, "TEXT BUBBLE");
        }
    }
    public static void calcVoids() {
        String input;
        int loops = 1;
        //double voidWidth = wallWidth;//MAKE GLOBAL
        double voidHeight = 0;
        double voidLength = 0;
        
        boolean stop = false;    
        while(!stop) {
            input = JOptionPane.showInputDialog("Enter the height of void area needed: (in)");
            voidHeight = voidHeight + Double.parseDouble(input);

            input = JOptionPane.showInputDialog("Enter the length of the void area needed: (in)");
            voidLength = voidLength + Double.parseDouble(input);

            Object[] options1 = { "Yes", "No" };
            JPanel panel = new JPanel();
            panel.add(new JLabel("Do you want to enter another void area?"));                    
            int result = JOptionPane.showOptionDialog(null, panel, "Void Areas", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options1, null);
            if (result == JOptionPane.YES_OPTION){
                input = JOptionPane.showInputDialog("Enter the height of void area needed: (in)");
                voidHeight = voidHeight + Double.parseDouble(input);

                input = JOptionPane.showInputDialog("Enter the length of the void area needed: (in)");
                voidLength = voidLength + Double.parseDouble(input);
                
                JOptionPane.showMessageDialog(null, "Total Void Areas Entered: " + loops);
            }
            if (result == JOptionPane.NO_OPTION){
                stop = true;
            }
        }
    }
}
